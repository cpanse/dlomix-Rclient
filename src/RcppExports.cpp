// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dlomix_AlphaPept_ms2_generic_ensemble
Rcpp::NumericVector dlomix_AlphaPept_ms2_generic_ensemble(Rcpp::StringVector peptide, int ce, int instrument, bool verbose, std::string url);
RcppExport SEXP _dlomix_dlomix_AlphaPept_ms2_generic_ensemble(SEXP peptideSEXP, SEXP ceSEXP, SEXP instrumentSEXP, SEXP verboseSEXP, SEXP urlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type peptide(peptideSEXP);
    Rcpp::traits::input_parameter< int >::type ce(ceSEXP);
    Rcpp::traits::input_parameter< int >::type instrument(instrumentSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type url(urlSEXP);
    rcpp_result_gen = Rcpp::wrap(dlomix_AlphaPept_ms2_generic_ensemble(peptide, ce, instrument, verbose, url));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dlomix_dlomix_AlphaPept_ms2_generic_ensemble", (DL_FUNC) &_dlomix_dlomix_AlphaPept_ms2_generic_ensemble, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_dlomix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
